require 'rails_helper'

 # This spec was generated by rspec-rails when you ran the scaffold generator.
 # It demonstrates how one might use RSpec to test the controller code that
 # was generated by Rails when you ran the scaffold generator.
 #
 # It assumes that the implementation code is generated by the rails scaffold
 # generator. If you are using any extension libraries to generate different
 # controller code, this generated spec may or may not pass.
 #
 # It only uses APIs available in rails and/or rspec-rails. There are a number
 # of tools you can use to make these specs even more expressive, but we're
 # sticking to rails and rspec-rails APIs to keep things simple and stable.


describe 'Managing FAQs' do
  context 'As an administator' do
    before { login_as(FactoryBot.create(:admin)) }

    context 'Given that an FAQ already exists' do
      specify 'I can delete it', js: true do
        FactoryBot.create :faq
        visit '/faqs'
        accept_confirm do
          within(:css, '#table') { click_link 'Destroy' }
        end
        within(:css, '#table') { expect(page).to_not have_content 'MyQuestion'}
      end

      specify 'I can edit it' do
        FactoryBot.create :faq
        visit '/faqs'
        within(:css, '#table') { click_link 'Edit' }
        fill_in 'Question', with: 'Updated question'
        click_button 'Submit Question'
        expect(page).to have_content 'Updated question'
      end

      specify 'I can answer it' do
        FactoryBot.create :faq
        visit '/faqs'
        within(:css, '#table') { click_link 'Answer' }
        fill_in 'Answer', with: 'Updated answer'
        click_button 'Submit Answer'
        expect(page).to have_content 'Updated answer'
      end
      
    specify 'I can hide it' do
      FactoryBot.create :faq
      visit '/faqs'
      within(:css, '#table') { expect(page).to have_content "MyQuestion"}
      within(:css, '#table') { expect(page).to_not have_content "Hidden"}
      within(:css, '#table') { click_link 'Answer' }
      check 'faq_hidden'
      click_button 'Submit Answer'
      visit '/faqs'
      within(:css, '#table') { expect(page).to have_content "Hidden"}
    end

      specify 'I can unhide it' do
        FactoryBot.create(:faq, hidden: true)
        visit '/faqs'
        within(:css, '#table') { expect(page).to have_content "MyQuestion"}
        within(:css, '#table') { expect(page).to have_content "Hidden"}
        within(:css, '#table') { click_link 'Answer' }
        uncheck 'faq_hidden'
        click_button 'Submit Answer'
        visit '/faqs'
        within(:css, '#table') { expect(page).to_not have_content "Hidden"}
      end
    end
  end
end