# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/products', type: :request do
  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let!(:material1) { FactoryBot.create(:material, name: 'material_one', kg_co2_per_kg: 7) }
  let!(:material2) { FactoryBot.create(:material, name: 'material_two', kg_co2_per_kg: 4) }

  let!(:valid_attributes) do
    { name: 'Product', category: 'Category', manufacturer: 'rht', mass: '45', url: 'http://www.test.com', manufacturer_country: 'IT', price: '10.1',
      products_material_attributes: [{ material_id: material1.id, percentage: 40 },
                                     { material_id: material2.id, percentage: 60 }] }
  end

  let!(:invalid_attributes) do
    { name: '', category: '', mass: '', manufacturer: '', url: '', manufacturer_country: '', price: '',
      products_material_attributes: [{ material_id: material1.id, percentage: 40 },
                                     { material_id: material2.id, percentage: 60 }] }
  end

  before { login_as(FactoryBot.create(:admin), scope: :staff) }

  describe 'GET /index' do
    it 'renders a successful response' do
      Product.create! valid_attributes
      get products_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      product = Product.create! valid_attributes
      get product_url(product)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_product_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      product = Product.create! valid_attributes
      get edit_product_url(product)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Product' do
        expect do
          post products_url, params: { product: valid_attributes }
        end.to change(Product, :count).by(1)
      end

      it 'redirects to the created product' do
        post products_url, params: { product: valid_attributes }
        expect(response).to redirect_to(product_url(Product.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Product' do
        expect do
          post products_url, params: { product: invalid_attributes }
        end.to change(Product, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post products_url, params: { product: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { name: 'NewProduct', category: 'NewCategory', manufacturer: 'NewManufacturer', mass: '12', url: 'https://test2.com', manufacturer_country: 'VN', price: '10.1' }
      end

      it 'updates the requested product' do
        product = Product.create! valid_attributes
        patch product_url(product), params: { product: new_attributes }
        product.reload
        expect(product.name).to eq 'NewProduct'
      end

      it 'redirects to the product' do
        product = Product.create! valid_attributes
        patch product_url(product), params: { product: new_attributes }
        product.reload
        expect(response).to redirect_to(product_url(product))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        product = Product.create! valid_attributes
        patch product_url(product), params: { product: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested product' do
      product = Product.create! valid_attributes
      expect do
        delete product_url(product)
      end.to change(Product, :count).by(-1)
    end

    it 'redirects to the products list' do
      product = Product.create! valid_attributes
      delete product_url(product)
      expect(response).to redirect_to(products_url)
    end
  end

  describe 'If I am not logged in as an admin' do
    before { logout(:staff) }

    def check_routes
      product = Product.create! valid_attributes

      get products_url
      expect(response).to be_successful

      get product_url(product)
      expect(response).to be_successful

      get edit_product_url(product)
      expect(response).to_not be_successful

      post products_url, params: { product: valid_attributes }
      expect(response).to be_successful

      patch product_url(product), params: { product: { name: 'new_name' } }
      expect(response).to_not be_successful

      delete product_url(product)
      expect(response).to_not be_successful
    end

    it 'only allows me to access certain routes if I am not logged in' do
      product = Product.create! valid_attributes

      get products_url
      expect(response).to be_successful

      get product_url(product)
      expect(response).to be_successful

      post products_url, params: { product: valid_attributes }
      expect(response).to_not be_successful

      patch product_url(product), params: { product: { name: 'new_name' } }
      expect(response).to_not be_successful

      delete product_url(product)
      expect(response).to_not be_successful
    end

    it 'only allows me to access certain routes if I am logged in as a customer' do
      login_as(FactoryBot.create(:customer), scope: :customer)
      check_routes
    end

    it 'only allows me to access certain routes if I am logged in as a business' do
      login_as(FactoryBot.create(:business), scope: :business)
      check_routes
    end

    it 'only allows me to access certain routes if I am logged in as a reporter' do
      login_as(FactoryBot.create(:reporter), scope: :staff)
      check_routes
    end
  end
end
