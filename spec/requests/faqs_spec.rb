require 'rails_helper'

 # This spec was generated by rspec-rails when you ran the scaffold generator.
 # It demonstrates how one might use RSpec to test the controller code that
 # was generated by Rails when you ran the scaffold generator.
 #
 # It assumes that the implementation code is generated by the rails scaffold
 # generator. If you are using any extension libraries to generate different
 # controller code, this generated spec may or may not pass.
 #
 # It only uses APIs available in rails and/or rspec-rails. There are a number
 # of tools you can use to make these specs even more expressive, but we're
 # sticking to rails and rspec-rails APIs to keep things simple and stable.

describe 'Managing FAQs' do
  context 'When I fill in the required information' do
    specify 'I can create a new FAQ entry' do
      visit '/faqs'
      click_link 'Submit a New Question'
      fill_in 'Question', with: 'An important question'
      click_button 'Submit Question'
      expect(page).to have_content 'An important question'
    end
  end

  context 'When I miss out some required information' do
    specify 'I see an error message' do
      visit '/faqs'
      click_link 'Submit a New Question'
      click_button 'Submit Question'
      expect(page).to have_content 'Question can\'t be blank'
    end
  end

  context 'Given that an FAQ already exists' do
    specify 'I can delete it', js: true do
      FactoryBot.create :faq
      visit '/faqs'
      accept_confirm do
        within(:css, '#table') { click_link 'Destroy' }
      end
      within(:css, '#table') { expect(page).to_not have_content }
    end

    specify 'I can edit it' do
      FactoryBot.create :faq
      visit '/faqs'
      within(:css, '#table') { click_link 'Edit' }
      fill_in 'Question', with: 'Updated question'
      click_button 'Submit Question'
      expect(page).to have_content 'Updated question'
    end

    specify 'I can answer it' do
      FactoryBot.create :faq
      visit '/faqs'
      within(:css, '#table') { click_link 'Answer' }
      fill_in 'Answer', with: 'Updated answer'
      click_button 'Submit Answer'
      expect(page).to have_content 'Updated answer'
    end
  end
end

describe '/faqs', type: :request do
  # Faq. As you add validations to Faq, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Faq.create! valid_attributes
      get faqs_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      faq = Faq.create! valid_attributes
      get faq_url(faq)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_faq_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      faq = Faq.create! valid_attributes
      get edit_faq_url(faq)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Faq' do
        expect do
          post faqs_url, params: { faq: valid_attributes }
        end.to change(Faq, :count).by(1)
      end

      it 'redirects to the created faq' do
        post faqs_url, params: { faq: valid_attributes }
        expect(response).to redirect_to(faq_url(Faq.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Faq' do
        expect do
          post faqs_url, params: { faq: invalid_attributes }
        end.to change(Faq, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post faqs_url, params: { faq: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested faq' do
        faq = Faq.create! valid_attributes
        patch faq_url(faq), params: { faq: new_attributes }
        faq.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the faq' do
        faq = Faq.create! valid_attributes
        patch faq_url(faq), params: { faq: new_attributes }
        faq.reload
        expect(response).to redirect_to(faq_url(faq))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        faq = Faq.create! valid_attributes
        patch faq_url(faq), params: { faq: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested faq' do
      faq = Faq.create! valid_attributes
      expect do
        delete faq_url(faq)
      end.to change(Faq, :count).by(-1)
    end

    it 'redirects to the faqs list' do
      faq = Faq.create! valid_attributes
      delete faq_url(faq)
      expect(response).to redirect_to(faqs_url)
    end
  end
end
